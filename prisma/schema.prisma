// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  personas      Persona[] // A user can have many personas
}

model Persona {
  id           String @id @default(cuid())
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name         String
  age          Int
  role         String
  experience   String
  bio          String @db.Text
  interests    String @db.Text
  disinterests String @db.Text
  imageUrl     String?

  bentos       Bento[] // A persona can have many bentos

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Bento {
  id                  String @id @default(cuid())
  personaId           String
  persona             Persona @relation(fields: [personaId], references: [id], onDelete: Cascade)

  type                String // "business-model", "swot", etc.
  businessDescription String @db.Text
  panels              Json // The dynamic panels will be stored as a JSON object
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}


// --- NextAuth.js Models ---

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
